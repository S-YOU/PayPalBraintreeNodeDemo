div#paypal.
  <!--
    <script src="https://js.braintreegateway.com/web/3.5.0/js/client.min.js"></script>
    <script src="https://js.braintreegateway.com/web/3.5.0/js/paypal.min.js"></script>

    <script src="https://www.paypalobjects.com/api/button.js?"
     data-merchant="braintree"
     data-id="paypal-button"
     data-button="checkout"
     data-color="gold"
     data-size="medium"
     data-shape="pill"
     data-button_type="submit"
     data-button_disabled="false"
     data-locale="ja_JP"
    ></script>

    <script>
    var paypalButton = document.getElementById('paypal-button');

    // Create a Client component
    braintree.client.create({
      authorization: '#{clientToken}'
    }, function (clientErr, clientInstance) {
      // Create PayPal component
      braintree.paypal.create({
        client: clientInstance
      }, function (err, paypalInstance) {
        paypalButton.addEventListener('click', function () {
        // Tokenize here!
        paypalInstance.tokenize({
          flow: 'checkout', // Required
          amount: 1000, // Required
          currency: 'JPY', // Required
          locale: 'ja_JP'
          }, function (err, tokenizationPayload) {
            // Tokenization complete
            // Send tokenizationPayload.nonce to server
            var form = document.createElement('form');
            document.body.appendChild(form);

            var inputNonce = document.createElement('input');
            inputNonce.setAttribute('type', 'hidden');
            inputNonce.setAttribute('name', 'payment_method_nonce');
            inputNonce.setAttribute('value', tokenizationPayload.nonce);
            form.appendChild(inputNonce);

            var inputAmount = document.createElement('input');
            inputAmount.setAttribute('type', 'hidden');
            inputAmount.setAttribute('name', 'amount');
            inputAmount.setAttribute('value', '1000');
            form.appendChild(inputAmount);

            form.setAttribute('action', '/checkout');
            form.setAttribute('method', 'post');
            form.submit();
          });
        });
      });
    });
    </script>
  -->

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>

  <script src="https://js.braintreegateway.com/web/3.22.2/js/client.min.js"></script>
  <script src="https://js.braintreegateway.com/web/3.22.2/js/paypal-checkout.min.js"></script>

  <script src="https://www.paypalobjects.com/api/checkout.js"></script>

  <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/" target="_blank">
   See the doc (PP)
  </a>
  <br/>
  <a href="https://braintree.github.io/braintree-web/current/PayPal.html#tokenize" target="_blank">
    See the doc (BT)
  </a>

  <h3>Client-side REST</h3>
  <div id="paypal-button"></div>

  <script>
    paypal.Button.render({

        env: 'sandbox', // Or 'production'

        client: {
            sandbox:    'Acz3G7kG9afqvZF7PJNw-hZvw_F9INQPnZGnSVbclnydHjpK53GxFkW67Wf76FbR8ZzbW_RB3Rznnckq',
            production: 'xxxx'
        },

        locale: 'ja_JP',

        style: {
            size: 'medium',
            color: 'gold',
            shape: 'pill',
            label: 'checkout'
        },

        commit: true, // Show a 'Pay Now' button

        payment: function(data, actions) {
            return actions.payment.create({
                payment: {
                    transactions: [
                        {
                            amount: { total: '1000', currency: 'JPY' }
                        }
                    ]
                }
            });
        },

        onAuthorize: function(data, actions) {
            return actions.payment.execute().then(function(payment) {

                // The payment is complete!
                // You can now show a confirmation message to the customer
                alert(JSON.stringify(payment));
            });
        }

    }, '#paypal-button');
  </script>


  <h3>Braintree SDK</h3>

  <div id="paypal-button-container"></div>


  <script>
    // Create a client.
    braintree.client.create({
      authorization: '#{clientToken}'
    }, function (clientErr, clientInstance) {

      // Stop if there was a problem creating the client.
      // This could happen if there is a network error or if the authorization
      // is invalid.
      if (clientErr) {
        console.error('Error creating client:', clientErr);
        return;
      }

      // Create a PayPal Checkout component.
      braintree.paypalCheckout.create({
        client: clientInstance
      }, function (paypalCheckoutErr, paypalCheckoutInstance) {

        // Stop if there was a problem creating PayPal Checkout.
        // This could happen if there was a network error or if it's incorrectly
        // configured.
        if (paypalCheckoutErr) {
          console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
          return;
        }

        // Set up PayPal with the checkout.js library
        paypal.Button.render({
          env: 'sandbox', // or 'production',

          locale: 'ja_JP',

          style: {
            size: 'medium',
            color: 'gold',
            shape: 'pill',
            label: 'checkout'
          },

          commit: true, // Show a 'Pay Now' button

          // This is called when the page gets shown.
          validate: function(actions) {
            //alert("validate");
          },

          // This is called when the button gets clicked
          onClick: function() {
            //alert("onClick");
          },

          payment: function () {
            return paypalCheckoutInstance.createPayment({
              // Your PayPal options here. For available options, see
              // http://braintree.github.io/braintree-web/current/PayPalCheckout.html#createPayment
              flow:     'checkout',
              amount:   '2000',
              currency: 'JPY',
              intent:   'sale',
              billingAgreementDescription: '都度決済です！',
              displayName: 'ベンゾ商店',
              //landingPageType: 'billing',
              enableShippingAddress: true,
              shippingAddressEditable: true,
              shippingAddressOverride: {
                line2:  '住所２ほげビル',
                line1:  '住所１北青山',
                city:   '港区',
                state:  '東京都',
                postalCode:  '123-4567',
                countryCode: 'JP',
                phone: '0322223333',
                recipientName: '太郎 山田'
              }
            });
          },

          onAuthorize: function (data, actions) {
            return paypalCheckoutInstance.tokenizePayment(data)
              .then(function (payload) {
                // Submit `payload.nonce` to your server.

                console.log(JSON.stringify(payload));  // PP shipping addresses is in payload.

                var form = document.createElement('form');
                document.body.appendChild(form);

                var inputNonce = document.createElement('input');
                inputNonce.setAttribute('type', 'hidden');
                inputNonce.setAttribute('name', 'payment_method_nonce');
                inputNonce.setAttribute('value', payload.nonce);
                form.appendChild(inputNonce);

                var inputAmount = document.createElement('input');
                inputAmount.setAttribute('type', 'hidden');
                inputAmount.setAttribute('name', 'amount');
                inputAmount.setAttribute('value', '2000');
                form.appendChild(inputAmount);

                form.setAttribute('action', '/checkout');
                form.setAttribute('method', 'post');
                form.submit();

                /*jQuery.post('http://localhost:3000/checkout',
                   { payment_method_nonce: payload.nonce, amount: "2000" })
                .done(function(data) {
                    alert(data);
                });*/

            });
          },

          onCancel: function (data) {
            console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
          },

          onError: function (err) {
            console.error('checkout.js error', err);
          }
        }, '#paypal-button-container').then(function () {
          // The PayPal button will be rendered in an html element with the id
          // `paypal-button`. This function will be called when the PayPal button
          // is set up and ready to be used.
        });

      });

    });
  </script>

  <h3>Braintree SDK (Auth & Cap)</h3>

  <div id="paypal-button-container-auth"></div>


  <script>
    // Create a client.
    braintree.client.create({
      authorization: '#{clientToken}'
    }, function (clientErr, clientInstance) {

      // Stop if there was a problem creating the client.
      // This could happen if there is a network error or if the authorization
      // is invalid.
      if (clientErr) {
        console.error('Error creating client:', clientErr);
        return;
      }

      // Create a PayPal Checkout component.
      braintree.paypalCheckout.create({
        client: clientInstance
      }, function (paypalCheckoutErr, paypalCheckoutInstance) {

        // Stop if there was a problem creating PayPal Checkout.
        // This could happen if there was a network error or if it's incorrectly
        // configured.
        if (paypalCheckoutErr) {
          console.error('Error creating PayPal Checkout:', paypalCheckoutErr);
          return;
        }

        // Set up PayPal with the checkout.js library
        paypal.Button.render({
          env: 'sandbox', // or 'production',

          locale: 'ja_JP',

          style: {
            size: 'medium',
            color: 'gold',
            shape: 'pill',
            label: 'checkout'
          },

          commit: true, // Show a 'Pay Now' button

          payment: function () {
            return paypalCheckoutInstance.createPayment({
              // Your PayPal options here. For available options, see
              // http://braintree.github.io/braintree-web/current/PayPalCheckout.html#createPayment
              flow:     'checkout',
              amount:   '2000',
              currency: 'JPY',
              intent:   'authorize',
              billingAgreementDescription: '都度決済です！',
              displayName: 'ベンゾ商店',
              //landingPageType: 'billing',
              enableShippingAddress: true,
              shippingAddressEditable: true,
              shippingAddressOverride: {
                line2:  '住所２ほげビル',
                line1:  '住所１北青山',
                city:   '港区',
                state:  '東京都',
                postalCode:  '123-4567',
                countryCode: 'JP',
                phone: '0322223333',
                recipientName: '太郎 山田'
              }
            });
          },

          onAuthorize: function (data, actions) {
            return paypalCheckoutInstance.tokenizePayment(data)
              .then(function (payload) {
                // Submit `payload.nonce` to your server.

                //alert(JSON.stringify(payload));  // PP shipping addresses is in payload.

                var form = document.createElement('form');
                document.body.appendChild(form);

                var inputNonce = document.createElement('input');
                inputNonce.setAttribute('type', 'hidden');
                inputNonce.setAttribute('name', 'payment_method_nonce');
                inputNonce.setAttribute('value', payload.nonce);
                form.appendChild(inputNonce);

                var inputAmount = document.createElement('input');
                inputAmount.setAttribute('type', 'hidden');
                inputAmount.setAttribute('name', 'amount');
                inputAmount.setAttribute('value', '2000');
                form.appendChild(inputAmount);

                form.setAttribute('action', '/auth');
                form.setAttribute('method', 'post');
                form.submit();

            });
          },

          onCancel: function (data) {
            console.log('checkout.js payment cancelled', JSON.stringify(data, 0, 2));
          },

          onError: function (err) {
            console.error('checkout.js error', err);
          }
        }, '#paypal-button-container-auth').then(function () {
          // The PayPal button will be rendered in an html element with the id
          // `paypal-button`. This function will be called when the PayPal button
          // is set up and ready to be used.
        });

      });

    });
  </script>

  <!--
  OLD
  <script>
    paypal.Button.render({

        env: 'production', // Or 'production'

        locale: 'ja_JP',

        style: {
            size: 'medium',
            color: 'gold',
            shape: 'pill',
            label: 'checkout'
        },

        commit: true, // Show a 'Pay Now' button

        braintree: braintree,

        client: {
            sandbox:    '#{clientToken}',
            production: '#{clientToken}'
        },

        payment: function(actions) {
            return actions.braintree.create({
                flow:     'checkout',
                amount:   '2000',
                currency: 'JPY',
                intent:   'sale',
                billingAgreementDescription: '都度決済です！',
                displayName: 'ベンゾ商店',
                //landingPageType: 'billing',
                enableShippingAddress: true,
                shippingAddressEditable: true,
                shippingAddressOverride: {
                  line2:  '住所２ほげビル',
                  line1:  '住所１北青山',
                  city:   '港区',
                  state:  '東京都',
                  postalCode:  '123-4567',
                  countryCode: 'JP',
                  phone: '0322223333',
                  recipientName: '太郎 山田'
                }
            });
        },

        onAuthorize: function(data) {

            // Submit `data.nonce` to your server

            var form = document.createElement('form');
            document.body.appendChild(form);

            var inputNonce = document.createElement('input');
            inputNonce.setAttribute('type', 'hidden');
            inputNonce.setAttribute('name', 'payment_method_nonce');
            inputNonce.setAttribute('value', data.nonce);
            form.appendChild(inputNonce);

            var inputAmount = document.createElement('input');
            inputAmount.setAttribute('type', 'hidden');
            inputAmount.setAttribute('name', 'amount');
            inputAmount.setAttribute('value', '2000');
            form.appendChild(inputAmount);

            form.setAttribute('action', '/checkout');
            form.setAttribute('method', 'post');
            form.submit();
        }

    }, '#paypal-button-container');
  </script>
  -->



  <br/>
  <br/><a href="/vault">Try Vault</a>
  <br/>
  <br/><a href="/hosted">Try Hosted Field</a>
